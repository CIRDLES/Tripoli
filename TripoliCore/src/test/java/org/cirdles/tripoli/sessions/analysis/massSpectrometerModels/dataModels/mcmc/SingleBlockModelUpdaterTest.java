package org.cirdles.tripoli.sessions.analysis.massSpectrometerModels.dataModels.mcmc;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class SingleBlockModelUpdaterTest {

    // IMPORTANT: These numeric values must match the data from MATLAB.
    // Please execute the MATLAB code and obtain the results to ensure consistency.

    // OVERVIEW: This process involves providing Tripoli with identical initial numeric inputs
    // and subsequently evaluating the Tripoli algorithm to determine if it produces results that match MATLAB.

    // STEP 1: Ensure that Tripoli receives the exact same initial numerical values.
    // STEP 2: Execute the Tripoli algorithm with the provided inputs.
    // STEP 3: Compare the results obtained from Tripoli with those generated by MATLAB.

    // NOTE: Pay particular attention to the Tripoli transformation when M = 40.

    // FUTURE WORK:
    // Consider conducting an additional test at a later stage in the overall process.
    // Eventually test when M is 40+ - Intense Data

    // Below is used for the M2 test case
    SingleBlockModelRecord singleBlockModelRecord;
    SingleBlockModelRecord singleBlockModelRecord_Test;

    // Below is used for the M40 test case
    SingleBlockModelRecord singleBlockModelRecordForM40;
    SingleBlockModelRecord singleBlockModelRecord_TestTwo;

    // Data pulled from Matlab - 10/21
    double[] baseLineMeansArray = {-3.998259626249467e+05, -2.997573248486633e+05, -1.996907909202233e+05,
            -9.995615539918667e+04, -1.034287000033334e+02, 1.000739996192033e+05,
            2.001169734613367e+05, 2.994251939133499e+05};

    // Data pulled from Matlab - 10/21
    double[] baseLineStdArray = {4.982654488334372e+03, 4.780096984329671e+03, 5.193362894109419e+03, 4.907056423299858e+03,
            4.714765807627592e+03, 5.160457416333462e+03, 5.046707504648971e+03, 4.697629292897528e+03};

    // Data pulled from Matlab - 10/21
    double[] logRatios = {0.013755458519046, 8.963225834300329e-06, 2.500000000000005e-07, 2.500000000000005e-07};

    // Data pulled from Matlab - 10/21
    double[] IO = {6.134069044869326e+05, 6.008566237422095e+05, 5.908634763865512e+05, 5.514048865900711e+05, 5.425026802749305e+05,
            5.335331142532417e+05, 5.244925341811369e+05, 5.156072911272954e+05, 5.075442507656551e+05, 4.997544044326933e+05,
            4.925957369655827e+05};

    // Pulled from the Matlab - Iteration m=1
    double[] delx = {0.012819918042855, -0.002522883826911, 3.935264800372901e-04, 1.454957603494240e-04,
            -1.077723039283252, -0.155257802641788, 0.051309012094972, 0.731607236842978,
            0.484253710141819, -0.504649362912455, 0.972666278739997, 0.303149131444137,
            -0.014099257508162, 0.280949206906329, -0.103641649512469, -0.037798167587677,
            0.506248636267279, 0.392192426857346, 0.290672536067569, 0.123634068116009,
            -0.280785436272478, 0.158800537540473, 0.496492908288080, 9.979502297411170e-05};

    //-----------------------------------BELOW ARE THE VARIABLES WHEN M=40-------------------------------------------
    // All Data below pulled from Matlab - 11/13
    double[] baseLineMeansArrayM40 = {-3.998262423766476e+05, -2.997556477332818e+05, -1.996903121869252e+05,
            -9.995601138930961e+04, -1.035537811512463e+02, 1.000735906251925e+05,
            2.001168487768683e+05, 2.994274451133274e+05};
    double[] baseLineStdArrayM40 = {4.982654488334372e+03, 4.780096984329671e+03, 5.193362894109419e+03, 4.907056423299858e+03,
            4.714765807627592e+03, 5.160457416333462e+03, 5.046707504648971e+03, 4.697629292897528e+03};
    double[] logRatiosM40 = {-6.031069338569641, -3.006973779872026, -1.001558827102033, -2.262130752741246e-04};
    double[] IOM40 = {6.134044585829126e+05, 6.008561570210998e+05, 5.908629305220867e+05, 5.514045493856475e+05, 5.425029593176300e+05,
            5.335329653754495e+05, 5.244941490959344e+05, 5.156085023862374e+05, 5.075438382373528e+05, 4.997548226663654e+05,
            4.925942754009367e+05};
    double[] delxM40 = {0.001884245608600, -0.002864208245891, 2.126369097343742e-04, 8.460309499286809e-04,
            0.856523736734085, 0.326167904585992, -0.035900458621752, 0.037005258852301,
            0.042708589496161, 0.036036060743444, -0.266157849498073, -0.147207502328440,
            -0.039080219559236, -0.188933945726675, 0.423148778209262, 0.772849953948081,
            -0.449712852216792, 0.035722389841039, -0.295838449673791, 0.239813962932293,
            0.327856648549135, -0.368096054064930, 0.591954772348082, -2.214131443974056e-04};

    double[] xMeanM40 = {-6.073289167528789, -3.006983842675471, -1.000416100938318, 5.657722549450082e-05, 6.134073171219325e+05,
            6.008560612830599e+05, 5.908632369644972e+05, 5.514051854246758e+05, 5.425031509974324e+05, 5.335326065410450e+05,
            5.244938058159130e+05, 5.156080336714678e+05, 5.075444889688225e+05, 4.997544484091820e+05, 4.925948236471663e+05,
            -3.998263824665513e+05, -2.997558394102788e+05, -1.996900885737050e+05, -9.995568892153828e+04, -1.034954470932014e+02,
            1.000737266687551e+05, 2.001174575996311e+05, 2.994264658907698e+05, 0.800215483527316};

    int m40 = 40; // Iteration 40

    @BeforeEach
    void setUp() {

        singleBlockModelRecord_Test = new SingleBlockModelRecord(
                1,
                8,
                11,
                4,
                null,
                baseLineMeansArray,
                baseLineStdArray,
                0.799898070507370,
                null,
                logRatios,
                null,
                null,
                new double[0],
                new double[0],
                IO,
                new double[0]
        );

        // Utilized in m = 40 test
        singleBlockModelRecord_TestTwo = new SingleBlockModelRecord(
                1,
                8,
                11,
                4,
                null,
                baseLineMeansArrayM40,
                baseLineStdArrayM40,
                0.799898070507370,
                null,
                logRatiosM40,
                null,
                null,
                new double[0],
                new double[0],
                IOM40,
                new double[0]
        );
    }

    @AfterEach
    void tearDown() {
    }

    @Test
    void randomOperMS() {
        SingleBlockModelUpdater singleBlockModelUpdater = new SingleBlockModelUpdater();
        String oper = singleBlockModelUpdater.randomOperMS(true);

        assertTrue(singleBlockModelUpdater.getOperations().contains(oper));
    }

    @Test
    void testUpdateMeanCovMS2() {

        SingleBlockModelUpdater modelUpdater = new SingleBlockModelUpdater();
        singleBlockModelRecord = modelUpdater.updateMSv2("changedfg", singleBlockModelRecord_Test,
                ProposedModelParameters.buildProposalRangesRecord(null), delx, true);

        //----------------------------------- STEP 1 ProposedModel Check ------------------------------------------

        // Confirm that the 'ProposedModelParameters.buildProposalRangesRecord(null)' call yields the same result
        // Verified that the numbers indeed matches the results from variable 'prior' obtained via Matlab - m = 1
        // My Nguyen 10/22

        //---------------------------------- STEP 2 singleBlockModelRecord Check ----------------------------------

        // Ensure that singleBlockModelRecord is the same as 'x2' - step with F8 to m2 from Matlab
        //
        // -------------------------------------------Matlab Results-----------------------------------------------
        //
        // Confirm that the 'singleBlockModelRecord' yields the same result used from Matlab - m = 2
        //
        // x2.lograt = -6.104637363581394, -3.005341905522350, -0.999850997215450, 5.314601660544664e-05
        //
        // x2.BL = -3.998260004231143e+05, -2.997568186000270e+05, -1.996903987277965e+05, -9.995586472665060e+04,
        //         -1.033050659352174e+02, 1.000737188337671e+05, 2.001171322618742e+05, 2.994256904062582e+05
        //
        // I = 6.134058267638932e+05, 6.008564684844068e+05, 5.908635276955633e+05, 5.514056181973080e+05,
        //     5.425031645286407e+05, 5.335326096038788e+05, 5.244935068474156e+05, 5.156075942764268e+05,
        //     5.075442366663976e+05, 4.997546853819002e+05, 4.925956333239331e+05
        //
        // TODO: Future work (Re-investigate DFGain calculation)
        // The current value (0.800014677927308) does not match the corresponding MATLAB result.
        //
        // My Nguyen 10/26

        double[] matLabBaseLineArray = {
                -3.998260004231143e+05,
                -2.997568186000270e+05,
                -1.996903987277965e+05,
                -9.995586472665060e+04,
                -1.033050659352174e+02,
                1.000737188337671e+05,
                2.001171322618742e+05,
                2.994256904062582e+05
        };

        double[] actualArray = singleBlockModelRecord.baselineMeansArray();
        double delta = 1e-7;
        // Assert Test 1 : Matlab numbers against Tripoli actual results when m=2
        assertArrayEquals(matLabBaseLineArray, actualArray, delta);

        /***************************************TEST CASE - M = 40**************************************************/
        /*** ProposedModelParameters.buildProposalRangesRecord(null) Test to ensure it matches prior from Matlab ***/

        SingleBlockModelUpdater modelUpdaterTestTwo = new SingleBlockModelUpdater();
        singleBlockModelRecordForM40 = modelUpdaterTestTwo.updateMSv2("changedI", singleBlockModelRecord_TestTwo,
                ProposedModelParameters.buildProposalRangesRecord(null), delxM40, true);

        double[][] matLabPriorBL = {{Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}};
        double[][] tripoliPrior = ProposedModelParameters.buildProposalRangesRecord(null).priorBaselineFaraday();
        // Assert Test 2: Confirming Prior from Matlab with Tripoli's PriorBaselineFaraday
        for (int i = 0; i < matLabPriorBL.length; i++) {
            assertArrayEquals(matLabPriorBL[i], tripoliPrior[i], 0.0);
        }

        SingleBlockModelUpdater.UpdatedCovariancesRecord resultM40 = modelUpdater.updateMeanCovMS2(
                singleBlockModelRecordForM40, new double[24][24], xMeanM40, m40);

        // Assert Test 3: Confirming davaCov()[1] from Tripoli to MatLab
        double meanCovFirstDigitMatLab = 4.6228166366862166E-5; // Data pulled from Matlab 11/13
        assertEquals(resultM40.dataCov()[0][0], meanCovFirstDigitMatLab);

    }
}