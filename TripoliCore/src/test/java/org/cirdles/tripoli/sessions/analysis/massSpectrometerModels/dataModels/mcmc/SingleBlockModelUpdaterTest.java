package org.cirdles.tripoli.sessions.analysis.massSpectrometerModels.dataModels.mcmc;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;

class SingleBlockModelUpdaterTest {

    // IMPORTANT: These numeric values must match the data from MATLAB.
    // Please execute the MATLAB code and obtain the results to ensure consistency.

    // OVERVIEW: This process involves providing Tripoli with identical initial numeric inputs
    // and subsequently evaluating the Tripoli algorithm to determine if it produces results that match MATLAB.

    // STEP 1: Ensure that Tripoli receives the exact same initial numerical values.
    // STEP 2: Execute the Tripoli algorithm with the provided inputs.
    // STEP 3: Compare the results obtained from Tripoli with those generated by MATLAB.

    // NOTE: Pay particular attention to the Tripoli transformation when M = 20.

    // FUTURE WORK:
    // Consider conducting an additional test at a later stage in the overall process.
    // Eventually test when M is 50+ - Intense Data

    SingleBlockModelRecord singleBlockModelRecord_Test;
    SingleBlockModelRecord singleBlockModelRecord;

    // Data pulled from Matlab - 10/21
    double [] baseLineMeansArray = {-3.998259626249467e+05, -2.997573248486633e+05, -1.996907909202233e+05,
                                    -9.995615539918667e+04, -1.034287000033334e+02, 1.000739996192033e+05,
                                    2.001169734613367e+05, 2.994251939133499e+05};

    // Data pulled from Matlab - 10/21
    double [] baseLineStdArray = {4.982654488334372e+03, 4.780096984329671e+03, 5.193362894109419e+03, 4.907056423299858e+03,
                                  4.714765807627592e+03, 5.160457416333462e+03, 5.046707504648971e+03, 4.697629292897528e+03};

    // Data pulled from Matlab - 10/21
    double[] logRatios = {-6.117457281624248, -3.002819021695439, -1.000244523695487, -9.234974374397734e-05};

    // Data pulled from Matlab - 10/21
    double[] IO = {6.134069044869326e+05, 6.008566237422095e+05, 5.908634763865512e+05, 5.514048865900711e+05, 5.425026802749305e+05,
                   5.335331142532417e+05, 5.244925341811369e+05, 5.156072911272954e+05, 5.075442507656551e+05, 4.997544044326933e+05,
                   4.925957369655827e+05};

    // Pulled from the Matlab - Iteration m=32
    double[] delx ={-0.009556244112501, -8.453392964611303e-04, -6.440791388770078e-04, -2.185626660072133e-05,
                    -1.045640986280030, 0.087822459673931, -0.222459411082141, 0.154567736731269,
                    0.087117770876463, -0.766777717088469, 0.291335871966661, -0.508589302857583,
                    0.662983661354333, -0.093586365905196, 0.013207356934307, 0.031816815709793,
                    -0.184676755618735, 0.002282455871744, 0.015234880367027, 0.430669700488954,
                    0.269364586726657, -0.225588804480196, -0.435922411140821, -2.067198196469684e-04};
    int m = 20; // Iteration 20

    @BeforeEach
    void setUp() {

        // Create Sudo ModelRecord

        singleBlockModelRecord_Test = new SingleBlockModelRecord(
                1, // Ask next meeting on this data on Matlab
                8, // Ask next meeting on this data on Matlab
                11, // Ask next meeting on this data on Matlab
                4, // Ask next meeting on this data on Matlab
                null,
                baseLineMeansArray,
                baseLineStdArray,
                1.000000000000057e-08, // Data pulled from Matlab
                null,
                logRatios,
                null,
                null,
                new double[0],
                new double[0],
                IO,
                new double[0]
        );
    }

    @AfterEach
    void tearDown() {
    }

    @Test
    void randomOperMS() {
        SingleBlockModelUpdater singleBlockModelUpdater = new SingleBlockModelUpdater();
        String oper = singleBlockModelUpdater.randomOperMS(true);

        assertTrue(singleBlockModelUpdater.getOperations().contains(oper));
    }

//    @Test
//    void testUpdateMeanCovMS2() {
//
//        SingleBlockModelUpdater modelUpdater = new SingleBlockModelUpdater();
//        singleBlockModelRecord = modelUpdater.updateMSv2("changedfg", singleBlockModelRecord_Test,
//                ProposedModelParameters.buildProposalRangesRecord(null), delx, true);
//
//
//        // CONFIRM Below
//        // ProposedModelParameters.buildProposalRangesRecord(null) Should be the same result as prior
//        // Simple test that the call is the same
//
//
//        //------------------------------ PRE CHECK ABOVE PHASE -----------------------------------
//        // Ensure that singleBlockModelRecord is the same as x2
//
//        SingleBlockModelUpdater.UpdatedCovariancesRecord result = modelUpdater.updateMeanCovMS2(
//                singleBlockModelRecord, new double[24][24], new double[24], m);
//
//        result.dataMean(); // Utilize Debug to extract and compare numbers
//    }
    // Do Assertion with EPSILON to compare doubles
}