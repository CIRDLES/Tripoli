package org.cirdles.tripoli.sessions.analysis.massSpectrometerModels.dataModels.mcmc;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;

class SingleBlockModelUpdaterTest {

    // IMPORTANT: These numeric values must match the data from MATLAB.
    // Please execute the MATLAB code and obtain the results to ensure consistency.

    // OVERVIEW: This process involves providing Tripoli with identical initial numeric inputs
    // and subsequently evaluating the Tripoli algorithm to determine if it produces results that match MATLAB.

    // STEP 1: Ensure that Tripoli receives the exact same initial numerical values.
    // STEP 2: Execute the Tripoli algorithm with the provided inputs.
    // STEP 3: Compare the results obtained from Tripoli with those generated by MATLAB.

    // NOTE: Pay particular attention to the Tripoli transformation when M = 32.

    // FUTURE WORK:
    // Consider conducting an additional test at a later stage in the overall process.

    SingleBlockModelRecord singleBlockModelRecord_Test;
    SingleBlockModelRecord singleBlockModelRecord;
    double [] baseLineMeansArray = {-399826.3822187037, -299757.32392412674, -199690.25908550684, -99956.0760771712,
                                    -103.29832749570951, 100073.76977221946, 200116.9173358956, 299425.4414813997};
    double [] baseLineStdArray = {4982.67807983952, 4780.0623321199555, 5193.360350459159, 4907.063915023453,
                                  4714.765639738263, 5160.46695647297, 5046.694666480015, 4697.626440989729};
    double[] logRatios = {-6.105156257140191, -3.004719311598562, -1.0005880585294717, -1.0037282990171001E-4};
    double[] IO = {612883.5566669849, 600968.2963926943, 590739.6635055963, 551123.8421191652, 542702.5980471913,
                   533590.5518885341, 524451.016364891, 515567.008106857, 507609.7292427336, 499693.58915267687,
                   492662.955219078};

    // Question: Why is this different from the Matlab data?
    double[] delxFromTripoli = {0.004170768065321623, -0.00314887325141291, -4.37519728182672E-4, -6.34135457419876E-5,
                                -0.4749341112430589, -0.6634067554015551, 0.18348516930381126, -0.13536823457736782,
                                -0.4769693150620054, -0.15264933337986433, 0.3817680415935163, -0.21775949787586843,
                                -0.38203812428457434, -0.12774606683542467, -0.5741906073946347, -0.4973301734544609,
                                0.39082162032608553, -0.35898482858768427, 0.12537309199867105, -0.23259242403893238,
                                0.06888437793938351, 0.11615599782691119, -0.4483944834451055, 2.4349319129622588E-4};

    // Pulled from the Matlab
    double[] delx ={0.005439985983731, -0.001764649800340, 4.442431155695026E-04, 6.101356253628601E-04,
                    -0.211929043563181, 0.345523368798430, -0.107412469789349, -0.211386627146525,
                    0.123670731663853, 0.029297615368424, 0.261184166405036, -0.283755438671355,
                    -0.362630074782122, 0.026616803301249, 0.614988942877385, 0.132608507055124,
                    -0.147920629498615, 0.239292885059762, 0.175454019002969, 0.005918250857458,
                    -0.308444399709241, 0.183644285707858, 0.377241309291027, 2.724669625624048E-04};
    int m = 20;

    @BeforeEach
    void setUp() {

        // Create Sudo ModelRecord

        singleBlockModelRecord_Test = new SingleBlockModelRecord(
                1,
                8,
                10,
                5,
                null,
                baseLineMeansArray,
                baseLineStdArray,
                0.8000798414508663,
                null,
                logRatios,
                null,
                null,
                new double[0],
                new double[0],
                IO,
                new double[0]
        );
    }

    @AfterEach
    void tearDown() {
    }

    @Test
    void randomOperMS() {
        SingleBlockModelUpdater singleBlockModelUpdater = new SingleBlockModelUpdater();
        String oper = singleBlockModelUpdater.randomOperMS(true);

        assertTrue(singleBlockModelUpdater.getOperations().contains(oper));
    }

//    @Test
//    void testUpdateMeanCovMS2() {
//
//        SingleBlockModelUpdater modelUpdater = new SingleBlockModelUpdater();
//        singleBlockModelRecord = modelUpdater.updateMSv2("changer", singleBlockModelRecord_Test,
//                ProposedModelParameters.buildProposalRangesRecord(null), delx, true);
//
//        SingleBlockModelUpdater.UpdatedCovariancesRecord result = modelUpdater.updateMeanCovMS2(
//                singleBlockModelRecord, new double[24][24], new double[24], m);
//
//        //result.dataMean(); // Utilize Debug to extract and compare numbers
//    }
}