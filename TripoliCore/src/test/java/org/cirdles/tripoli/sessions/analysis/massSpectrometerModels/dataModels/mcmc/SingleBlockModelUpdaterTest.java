package org.cirdles.tripoli.sessions.analysis.massSpectrometerModels.dataModels.mcmc;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;

class SingleBlockModelUpdaterTest {

    // Questions:: Numbers always a bit different?

    // IMPORTANT: These numeric values must match the data from MATLAB.
    // Please execute the MATLAB code and obtain the results to ensure consistency.

    // OVERVIEW: This process involves providing Tripoli with identical initial numeric inputs
    // and subsequently evaluating the Tripoli algorithm to determine if it produces results that match MATLAB.

    // STEP 1: Ensure that Tripoli receives the exact same initial numerical values.
    // STEP 2: Execute the Tripoli algorithm with the provided inputs.
    // STEP 3: Compare the results obtained from Tripoli with those generated by MATLAB.

    // NOTE: Pay particular attention to the Tripoli transformation when M = 20.

    // FUTURE WORK:
    // Consider conducting an additional test at a later stage in the overall process.
    // Eventually test when M is 50+ - Intense Data

    SingleBlockModelRecord singleBlockModelRecord_Test;
    SingleBlockModelRecord singleBlockModelRecord;


    // Data pulled from Matlab
    double [] baseLineMeansArray = {-3.998265002401323e+05, -2.997565700137301e+05, -1.996899476345751e+05,
                                    -9.995635264175237e+04, -1.040958594379146e+02, 1.000734063390398e+05,
                                    2.001158634605617e+05, 2.994257914163734e+05};

    double [] baseLineStdArray = {4982.67807983952, 4780.0623321199555, 5193.360350459159, 4907.063915023453,
                                  4714.765639738263, 5160.46695647297, 5046.694666480015, 4697.626440989729};

    // Data pulled from Matlab
    double[] logRatios = {6.056398754398573, -3.003785853586291, -1.002138711998469, -0.001066491370376};
    double[] IO = {612883.5566669849, 600968.2963926943, 590739.6635055963, 551123.8421191652, 542702.5980471913,
                   533590.5518885341, 524451.016364891, 515567.008106857, 507609.7292427336, 499693.58915267687,
                   492662.955219078};

    // Pulled from the Matlab - Iteration m=20
    double[] delx ={-0.009556244112501, -8.453392964611303e-04, -6.440791388770078e-04, -2.185626660072133e-05,
                    -1.045640986280030, 0.087822459673931, -0.222459411082141, 0.154567736731269,
                    0.087117770876463, -0.766777717088469, 0.291335871966661, -0.508589302857583,
                    0.662983661354333, -0.093586365905196, 0.013207356934307, 0.031816815709793,
                    -0.184676755618735, 0.002282455871744, 0.015234880367027, 0.430669700488954,
                    0.269364586726657, -0.225588804480196, -0.435922411140821, -2.067198196469684e-04};
    int m = 20; // Iteration 20

    @BeforeEach
    void setUp() {

        // Create Sudo ModelRecord

        singleBlockModelRecord_Test = new SingleBlockModelRecord(
                1,
                8,
                11,
                4,
                null,
                baseLineMeansArray,
                baseLineStdArray,
                0.799740343578078, // Data pulled from Matlab
                null,
                logRatios,
                null,
                null,
                new double[0],
                new double[0],
                IO,
                new double[0]
        );
    }

    @AfterEach
    void tearDown() {
    }

    @Test
    void randomOperMS() {
        SingleBlockModelUpdater singleBlockModelUpdater = new SingleBlockModelUpdater();
        String oper = singleBlockModelUpdater.randomOperMS(true);

        assertTrue(singleBlockModelUpdater.getOperations().contains(oper));
    }

    @Test
    void testUpdateMeanCovMS2() {

        SingleBlockModelUpdater modelUpdater = new SingleBlockModelUpdater();
        singleBlockModelRecord = modelUpdater.updateMSv2("changer", singleBlockModelRecord_Test,
                ProposedModelParameters.buildProposalRangesRecord(null), delx, true);

        SingleBlockModelUpdater.UpdatedCovariancesRecord result = modelUpdater.updateMeanCovMS2(
                singleBlockModelRecord, new double[24][24], new double[24], m);

        result.dataMean(); // Utilize Debug to extract and compare numbers
    }
    // Do Assertion with EPSILON to compare doubles
}